{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","delete","data","post","todolistsAPI","title","id","put","todolistId","taskId","taskTitile","model","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppErrorAC","state","action","payload","setInitializedAC","setAppStatusAC","appReducer","reducer","actions","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","removeTaskAC","tasks","tsk","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","isLoggedIn","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","setIsLoggedInAC","authReducer","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23039847.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {LoginParamsType} from \"../features/TodolistsList/TodolistsList\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '41baaef3-6da6-4de6-b20f-66271991d083'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        const promise = instance.get<ResponseType<AuthType>>('auth/me');\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType>(`auth/login`);\r\n        return promise;\r\n    },\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{ userId: number }>>('auth/login', data);\r\n        return promise;\r\n    }\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type AuthType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{error: null | string}>){\r\n            state.error = action.payload.error\r\n        },\r\n        setInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>){\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>){\r\n            state.status = action.payload.status\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const {setAppErrorAC,setInitializedAC, setAppStatusAC} = slice.actions\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetInitializedActionType = ReturnType<typeof setInitializedAC>\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todoList',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {addTodolistAC, changeTodolistEntityStatusAC, changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC, setTodolistsAC} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tsk => tsk.id === action.payload.taskId)\r\n            tasks.splice(index, 1)\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{task: TaskType}>){\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tsk => tsk.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>){\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n\r\n})\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n\r\n// actions\r\nexport const {removeTaskAC, addTaskAC, setTasksAC, updateTaskAC} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type LoginErrorParamsType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    if (!isLoggedIn){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType, setInitializedAC } from '../../app/app-reducer'\r\nimport {authAPI} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {LoginParamsType} from \"../TodolistsList/TodolistsList\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean }>){\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nconst setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n        }\r\n        dispatch(setInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n\r\n\r\n// types\r\n// type ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n","\r\n\r\nimport React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {LoginErrorParamsType, LoginParamsType} from \"../TodolistsList/TodolistsList\";\r\n\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const validate = (values: LoginParamsType) => {\r\n        const errors: LoginErrorParamsType = {};\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Required';\r\n        } else if (values.password.length < 5) {\r\n            errors.password = 'password is small';\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            // alert(JSON.stringify(values));\r\n        },\r\n    })\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                        // name=\"email\"\r\n                        // onChange={formik.handleChange}\r\n                        // value={formik.values.email}\r\n                    />\r\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n                        // name=\"password\"\r\n                        // onChange={formik.handleChange}\r\n                        // value={formik.values.password}\r\n                    />\r\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            // name=\"rememberMe\"\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.rememberMe}\r\n                        />}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\nimport {Route} from \"react-router-dom\";\r\nimport {Login} from '../features/Login/Login'\r\nimport {initializeAppTC, logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn\r\n                            ? <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>\r\n                            : <Button color=\"inherit\">Login</Button>}\r\n\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() =><TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() =><Login/>}/>\r\n                </Container>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}